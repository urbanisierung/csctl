#!/usr/bin/env bash

set -Eeuo pipefail
trap cleanup SIGINT SIGTERM ERR EXIT

script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)

CLI_NAME=$(basename "${BASH_SOURCE[0]}")

usage() {
  cat <<EOF
Usage: $CLI_NAME [-h] [-p] [-u] [-d] [-r] [-H hostname] [-c cluster-name] [-n namespace] [profile or extra-values file]

Install Camunda 8 with just one command.
Full installation via:
  $CLI_NAME -p full

Delete installation via:
  $CLI_NAME -d

Available options:

-h,  --help             Print this help and exit
-p,  --profile          Use a profile instead of an extra-values file
-u,  --unreleased       Use unreleased helm charts
-r,  --reset            Reset local files
-d,  --delete           Delete the cluster
-H,  --host             Host name (default: camunda.local)
-c,  --cluster          Cluster name (default: camunda-platform-local)
-n,  --namespace        Namespace (default: camunda-platform)
-cv, --console-version  Console version (default: SNAPSHOT)
-hv, --helm-version     Helm chart version to use (optional)
-st, --skip-tls         Skip TLS certificate generation (dafault: false)
-ds, --docker-server    Docker server (default: registry.camunda.cloud)
-dr, --docker-registry  Docker registry (default: registry-camunda-cloud)
-tls, --tls             TLS certificate
EOF
  exit
}

toolscheck() {
  if ! command -v kind &>/dev/null; then
    msg "${RED}kind is not installed. Please install kind first."
    exit 1
  fi

  if ! command -v docker &>/dev/null; then
    msg "${RED}docker is not installed. Please install docker first."
    exit 1
  fi

  if ! command -v kubectl &>/dev/null; then
    msg "${RED}kubectl is not installed. Please install kubectl first."
    exit 1
  fi

  if ! command -v helm &>/dev/null; then
    msg "${RED}helm is not installed. Please install helm first."
    exit 1
  fi

  if ! command -v git &>/dev/null; then
    msg "${RED}git is not installed. Please install git first."
    exit 1
  fi
}

cleanup() {
  trap - SIGINT SIGTERM ERR EXIT
  # script cleanup here
}

setup_colors() {
  if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
    NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
  else
    NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
  fi
}

msg() {
  echo >&2 -e "${1-}"
}

die() {
  local msg=$1
  local code=${2-1} # default exit status 1
  msg "$msg"
  exit "$code"
}

parse_params() {
  # default values of variables set from params
  flag=0
  param=''
  profile=0
  unreleased=0
  cleanup=0
  reset=0
  host_name='camunda.local'
  extra_values='full'
  cluster_name='camunda-platform-local'
  namespace='camunda-platform'
  console_version='SNAPSHOT'
  helm_version=''
  skip_tls=0
  docker_server='registry.camunda.cloud'
  docker_registry='registry-camunda-cloud'
  tls=0

  while :; do
    case "${1-}" in
    -h | --help) usage ;;
    --no-color) NO_COLOR=1 ;;
    -p | --profile) profile=1 ;;
    -u | --unreleased) unreleased=1 ;;
    -d | --delete) cleanup=1 ;;
    -r | --reset) reset=1 ;;
    -st | --skip-tls) skip_tls=1 ;;
    -tls | --tls) tls=1 ;;
    -H | --host)
      host_name="${2-}"
      shift
      ;;
    -c | --cluster)
      cluster_name="${2-}"
      shift
      ;;
    -n | --namespace)
      namespace="${2-}"
      shift
      ;;
    -cv | --console-version)
      console_version="${2-}"
      shift
      ;;
    -hv | --helm-version)
      helm_version="${2-}"
      shift
      ;;
    -ds | --docker-server)
      docker_server="${2-}"
      shift
      ;;
    -dr | --docker-registry)
      docker_registry="${2-}"
      shift
      ;;
    -?*) die "Unknown option: $1" ;;
    *) break ;;
    esac
    shift
  done

  args=("$@")

  # check required params and arguments
  # [[ -z "${param-}" ]] && die "Missing required parameter: param"

  return 0
}

parse_params "$@"
setup_colors

# constants

REPO_NAME="urbanisierung/csctl"
COCI_DIR="$HOME/.$CLI_NAME"
COCI_CHECKOUT_DIR=$COCI_DIR/$CLI_NAME
COCI_CHECKOUT_INFRA_DIR=$COCI_CHECKOUT_DIR/infra
COCI_TLS=$COCI_DIR/tls

COCI_EXTRA_VALUES=$COCI_DIR/full.yaml
COCI_VALUES=$COCI_DIR/values.yaml
COCI_GITHUB=https://raw.githubusercontent.com/$REPO_NAME
COCI_GITHUB_EXTRA_VALUES=$COCI_GITHUB/main/extra-values
COCI_HELM_CHARTS=camunda/camunda-platform

###########################
# TOOLS CHECK
toolscheck

###########################
# C8 CLEANUP

if [ $cleanup -eq 1 ]; then
  msg "${YELLOW}Deleting cluster $cluster_name${NOFORMAT}"
  rm -rf $COCI_CHECKOUT_INFRA_DIR/modules/*/charts $COCI_CHECKOUT_INFRA_DIR/deployments/*/charts
  rm -rf $COCI_CHECKOUT_INFRA_DIR/repositories/*
  kind delete cluster --name $cluster_name
  exit
fi

###########################
# C8 INSTALLATION

# prerequisites
[[ ${#args[@]} -eq 0 ]] && die "Missing profile or extra-values file"

# determine extra values file
if [ $profile -eq 1 ]; then
  extra_values=$COCI_CHECKOUT_DIR/extra-values/$args.yaml
else
  extra_values=${args[0]}
  COCI_VALUES=$extra_values
fi

# script logic here

msg "${PURPLE}Parameters:"
msg "- cluster: ${cluster_name}"
msg "- namespace: ${namespace}"
msg "- host: ${host_name}"
msg "- console-version: ${console_version}"
msg "- extra-values: ${extra_values}"
msg "- docker server: ${docker_server}"
msg "- docker registry: ${docker_registry}"
msg "- skip-tls: ${skip_tls}${NOFORMAT}"

if [ $reset -eq 1 ]; then
  rm -rf $COCI_CHECKOUT_DIR
fi

if [ -d $COCI_CHECKOUT_DIR ]; then
  msg "$CLI_NAME repo already checked out"
else
  msg "checking out $CLI_NAME repo"
  mkdir -p $COCI_CHECKOUT_DIR
  git clone https://github.com/$REPO_NAME.git $COCI_CHECKOUT_DIR
fi

if [ $profile -eq 1 ]; then
  # replace host name
  msg "${YELLOW}Replacing host name. target: ${COCI_VALUES} ${NOFORMAT}"
  sed 's/${HOST}/'"$host_name"'/g' $extra_values >${COCI_VALUES}_tmp

  msg "${YELLOW}Replacing console version. target: ${COCI_VALUES} ${NOFORMAT}"
  sed 's/${CONSOLE_VERSION}/'"$console_version"'/g' ${COCI_VALUES}_tmp >$COCI_VALUES

  rm ${COCI_VALUES}_tmp
fi

# unreleased helm charts
if [ $unreleased -eq 1 ]; then
  msg "${YELLOW}using unreleased helm charts${NOFORMAT}"
  mkdir -p $COCI_CHECKOUT_INFRA_DIR/repositories
  git clone https://github.com/camunda/camunda-platform-helm.git $COCI_CHECKOUT_INFRA_DIR/repositories/camunda-platform-helm
  make -C $COCI_CHECKOUT_INFRA_DIR/repositories/camunda-platform-helm helm.dependency-update
  COCI_HELM_CHARTS=$COCI_CHECKOUT_INFRA_DIR/repositories/camunda-platform-helm/charts/camunda-platform-alpha
fi

# cluster
msg "${YELLOW}creating cluster${NOFORMAT}"
kind create cluster --config $COCI_CHECKOUT_INFRA_DIR/clusters/kind/kind-cluster-config.yaml --name $cluster_name

# infra
msg "${YELLOW}setting up infra${NOFORMAT}"
kubectl kustomize --enable-helm $COCI_CHECKOUT_INFRA_DIR/modules/ingress-nginx | kubectl apply -f -
kubectl create namespace $namespace
kubectl config set-context --current --namespace=$namespace

if [ $skip_tls -eq 0 ]; then
  msg "${YELLOW}Generating TLS certificate${NOFORMAT}"
  mkdir -p $COCI_TLS
  openssl req -x509 -nodes -days 365 -newkey rsa:2048 -subj "/C=US/ST=C8/L=Theland/O=C8/CN=$host_name" -keyout $COCI_TLS/c8-key.key -out $COCI_TLS/c8-cert.pem
  kubectl -n $namespace create secret tls camunda-platform \
    --cert=$COCI_TLS/c8-cert.pem \
    --key=$COCI_TLS/c8-key.key
fi

# check if envvars exist
if compgen -v | grep -q CAMUNDA_REG_USER && compgen -v | grep -q CAMUNDA_REG_PASS; then
  msg "${YELLOW}Setting up Docker registry $docker_server credentials${NOFORMAT}"
  kubectl -n $namespace create secret docker-registry $docker_registry \
    --namespace $namespace \
    --docker-server "$docker_server" \
    --docker-username "$CAMUNDA_REG_USER" \
    --docker-password "$CAMUNDA_REG_PASS"
else
  msg "${RED}Docker registry credentials not set. Enterprise components will not be fetched.${NOFORMAT}"
fi

# TLS
if [ $tls -eq 1 ]; then
  msg "${YELLOW}Generating TLS certificate for Console${NOFORMAT}"
  mkdir -p $COCI_TLS
  openssl req -x509 -nodes -days 365 -newkey rsa:2048 -subj "/C=US/ST=C8/L=Theland/O=C8/CN=$host_name" -keyout $COCI_TLS/console-key.key -out $COCI_TLS/console-cert.pem
  kubectl create configmap ssl-certs-certificate --from-file=$COCI_TLS/console-cert.pem -n $namespace
  kubectl create configmap ssl-certs-key --from-file=$COCI_TLS/console-key.key -n $namespace
fi

# c8
msg "${YELLOW}installing c8 ($COCI_HELM_CHARTS)${NOFORMAT}"
if [ -n "$helm_version" ]; then
  helm template camunda-platform $COCI_HELM_CHARTS --values $COCI_VALUES --skip-tests --version "$helm_version" | kubectl apply -n $namespace -f -
else
  helm template camunda-platform $COCI_HELM_CHARTS --values $COCI_VALUES --skip-tests | kubectl apply -n $namespace -f -
fi

# enjoy
if ! command -v watch >/dev/null 2>&1
then
  echo "watch could not be found"
  kubectl get pods
else
  watch kubectl get pods
fi

msg "${BLUE}Camunda 8 installation done:"
msg "- cluster: ${cluster_name}"
msg "- namespace: ${namespace}"
msg "- host: ${host_name}"
msg "- Open console: https://${host_name}"
msg "${ORANGE}Make sure to add the following entry to your /etc/hosts or /private/etc/hosts file:"
msg "127.0.0.1       ${host_name}"
